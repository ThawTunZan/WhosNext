# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# Add the SharedWith type
type SharedWith {
  payeeName: String!
  amount: Float!
  currency: String!
}

# Add input type for mutations
input SharedWithInput {
  payeeName: String!
  amount: Float!
  currency: String!
}

type Debt @model {
  id: ID!
  tripId: ID!
  currency: String!
  debtor: String!
  creditor: String!
  amount: Float!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type User @model {
  id: ID!
  username: String! @index(name: "byUsername", queryField: "getUserByUsername")
  email: String!
  fullName: String!
  avatarUrl: String
  premiumStatus: PremiumStatus!
  friends: [String] # Array of usernames
  incomingFriendRequests: [FriendRequest]
  outgoingFriendRequests: [FriendRequest]
  trips: [String] # Array of trip IDs for quick access
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type FriendRequest @model {
  id: ID!
  username: String!
  status: RequestStatus!
  timestamp: AWSDateTime!
}


type Trip @model {
  id: ID!
  name: String!
  currency: String!
  createdBy: String! @index(name: "byCreator", queryField: "getTripsByCreator")
  members: [Member] @hasMany(indexName: "byTrip", fields: ["id"])
  expenses: [Expense] @hasMany(indexName: "byTrip", fields: ["id"])
  debts: AWSJSON # Store as JSON string
  totalAmtLeft: Float
  totalBudget: Float
  startDate: AWSDateTime
  endDate: AWSDateTime
  isTripPremium: Boolean!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Member @model {
  id: ID!
  username: String! @index(name: "byUsername", queryField: "getMembersByUsername")
  fullName: String!
  tripId: ID! @index(name: "byTrip", queryField: "getMembersByTrip")
  trip: Trip @belongsTo(fields: ["tripId"])
  amtLeft: Float
  owesTotalMap: AWSJSON
  addMemberType: AddMemberType
  budget: Float
  receiptsCount: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Expense @model {
  id: ID!
  tripId: ID! @index(name: "byTrip", queryField: "getExpensesByTrip")
  trip: Trip @belongsTo(fields: ["tripId"])
  activityName: String!
  amount: Float!
  currency: String!
  paidBy: String!
  sharedWith: [SharedWith!]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum PremiumStatus {
  free
  trial
  premium
}

enum RequestStatus {
  pending
  accepted
  rejected
}

enum AddMemberType {
  friends
  public
  private
}